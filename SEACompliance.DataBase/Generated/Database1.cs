
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `SEACompliance`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=10.123.4.214;Initial Catalog=SEACompliance;Persist Security Info=True;User ID=sa;password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `False`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Umbraco.Core;
using Umbraco.Core.Persistence;
using Umbraco.Core.Persistence.DatabaseAnnotations;


namespace SEACompliance.DataBase
{        
		public class Record<T> where T:new()
		{
			public static Database repo { get { return ApplicationContext.Current.DatabaseContext.Database; } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
				public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
				public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			//public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
			}

    
	[TableName("APlatformAppSchema.lnComplianceModule")]
	[PrimaryKey("PackageID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class lnComplianceModule : Record<lnComplianceModule>  
    {
		[Column] public string PackageID { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Abbreviation { get; set; }
		[Column] public string Summary { get; set; }
		[Column] public string Category { get; set; }
		[Column] public int Sequence { get; set; }
		[Column] public string ParentPackageID { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? UpdateTime { get; set; }
		[Column] public string CreateBy { get; set; }
		[Column] public string UpdateBy { get; set; }
		[Column] public bool IsDelete { get; set; }
		[Column] public int LEVEL { get; set; }
		[Column] public bool? IsUpdate { get; set; }
		[Column] public DateTime? UploadTime { get; set; }
	}
    
	[TableName("APlatformAppSchema.lnRICheckItem")]
	[PrimaryKey("DocID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class lnRICheckItem : Record<lnRICheckItem>  
    {
		[Column] public int ItemID { get; set; }
		[Column] public string DocID { get; set; }
		[Column] public string EntityID { get; set; }
		[Column] public int Version { get; set; }
		[Column] public bool IsLatest { get; set; }
		[Column] public DateTime? CREATETIME { get; set; }
		[Column] public DateTime? UPDATETIME { get; set; }
		[Column] public string Path { get; set; }
		[Column] public bool IsDelete { get; set; }
		[Column] public string MetaPath { get; set; }
		[Column] public string Title { get; set; }
		[Column] public string ReasonCodes { get; set; }
		[Column] public int? Importance { get; set; }
		[Column] public int? Risk { get; set; }
		[Column] public DateTime? EffectiveDate { get; set; }
		[Column] public string HasMeta { get; set; }
		[Column] public string CheckItemContent { get; set; }
		[Column] public string Penalty { get; set; }
		[Column] public int? UnderReview { get; set; }
	}
    
	[TableName("APlatformAppSchema.lnRIFile")]
	[PrimaryKey("DocID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class lnRIFile : Record<lnRIFile>  
    {
		[Column] public string DocID { get; set; }
		[Column] public string Title { get; set; }
		[Column] public string MimeType { get; set; }
		[Column] public string Path { get; set; }
		[Column] public DateTime? CREATETIME { get; set; }
		[Column] public string Content { get; set; }
		[Column] public string DocumentID { get; set; }
		[Column] public DateTime? UPDATETIME { get; set; }
		[Column] public string FileName { get; set; }
		[Column] public string CreateUser { get; set; }
	}
    
	[TableName("APlatformAppSchema.lnRIFileContent")]
	[PrimaryKey("Content", autoIncrement=false)]
	[ExplicitColumns]
    public partial class lnRIFileContent : Record<lnRIFileContent>  
    {
		[Column] public string Content { get; set; }
		[Column] public string FileExtension { get; set; }
	}
    
	[TableName("APlatformAppSchema.lnRIRecord")]
	[PrimaryKey("DocID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class lnRIRecord : Record<lnRIRecord>  
    {
		[Column] public string DocID { get; set; }
		[Column] public string Title { get; set; }
		[Column] public string PackageID { get; set; }
		[Column] public string Topic { get; set; }
		[Column] public string SubTopic { get; set; }
		[Column] public string EntityID { get; set; }
		[Column] public int Version { get; set; }
		[Column] public bool IsLatest { get; set; }
		[Column] public DateTime? CREATETIME { get; set; }
		[Column] public DateTime? UPDATETIME { get; set; }
		[Column] public string Path { get; set; }
		[Column] public bool IsDelete { get; set; }
		[Column] public DateTime? EffectiveDate { get; set; }
		[Column] public string MetaPath { get; set; }
		[Column] public string DocumentNumber { get; set; }
		[Column] public string Author { get; set; }
		[Column] public string Summary { get; set; }
		[Column] public string Risk { get; set; }
		[Column] public string ReferenceDocument { get; set; }
	}
    
	[TableName("APlatformAppSchema.lnRIRecordEntity")]
	[PrimaryKey("EntityID", autoIncrement=false)]
	[ExplicitColumns]
    public partial class lnRIRecordEntity : Record<lnRIRecordEntity>  
    {
		[Column] public string EntityID { get; set; }
		[Column] public string Title { get; set; }
		[Column] public string LatestDocID { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? Updatetime { get; set; }
	}
    
	[TableName("APlatformAppSchema.lnRIRelRecordCheckItem")]
	[ExplicitColumns]
    public partial class lnRIRelRecordCheckItem : Record<lnRIRelRecordCheckItem>  
    {
		[Column] public string DocID { get; set; }
		[Column] public string CheckItemID { get; set; }
		[Column] public int SortOrder { get; set; }
		[Column] public bool? IsDelete { get; set; }
	}
    
	[TableName("APlatformAppSchema.lnRIRelRecordTools")]
	[ExplicitColumns]
    public partial class lnRIRelRecordTool : Record<lnRIRelRecordTool>  
    {
		[Column] public string DocID { get; set; }
		[Column] public string FileDocID { get; set; }
	}
    
	[TableName("dbo.RIRecord_Type")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class RIRecord_Type : Record<RIRecord_Type>  
    {
		[Column] public int Id { get; set; }
		[Column] public string ParentCode { get; set; }
		[Column] public string Code { get; set; }
		[Column] public string Category { get; set; }
		[Column] public string Label { get; set; }
		[Column] public string LabelDes { get; set; }
		[Column] public int Depth { get; set; }
		[Column] public int Status { get; set; }
		[Column] public int Sort { get; set; }
		[Column] public DateTime AddTime { get; set; }
	}
}
